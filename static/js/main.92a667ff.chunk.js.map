{"version":3,"sources":["components/canvas.jsx","App.js","serviceWorker.js","index.js"],"names":["Canvas","state","colsSpacing","statistics","handleChange","event","setState","target","value","split","ctx","colsCount","relativeColsHeights","canvasHeight","canvasWidth","colWidth","colsHeights","i","this","props","colorTheme","heightLevel","fillStyle","gradient","createLinearGradient","addColorStop","fillRect","fontSize","font","lineWidth","strokeText","measureText","width","fillText","obj","key","size","hasOwnProperty","refs","canvas","height","getContext","heightUnit","Math","max","map","colsHeight","drawGist","clearRect","className","ref","type","onChange","placeholder","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92a667ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './canvas.css'\r\n\r\nclass Canvas extends React.Component {\r\n\r\n    state = {\r\n        colsSpacing: 10,\r\n        statistics: []\r\n    }\r\n\r\n    drawGist( \r\n        ctx,\r\n        colsCount, \r\n        relativeColsHeights,\r\n        canvasHeight,\r\n        canvasWidth,\r\n        colWidth,\r\n        colsSpacing,\r\n        colsHeights\r\n        ) {\r\n        // отрисовываем столбцы\r\n        for (let i = 0; i < colsCount; i++) {\r\n            \r\n            // для цветовой схемы \"fullColorsCols\"\r\n            if (this.props.colorTheme === 'fullColorsCols') {\r\n\r\n                let heightLevel = relativeColsHeights[i] / canvasHeight; // определяем высоту колонки относительно канваса\r\n\r\n                // высокие колонки красим в красный, средний в желтый, низкие в зеленый \r\n                if(heightLevel > .67) {\r\n                    ctx.fillStyle = \"red\";\r\n                }else if (heightLevel > 0.33){\r\n                    ctx.fillStyle = \"orange\";\r\n                }\r\n                else {\r\n                    ctx.fillStyle = \"green\";\r\n                }\r\n\r\n            // для цветовой схемы \"gradient\"\r\n            }else if (this.props.colorTheme === 'gradient') {\r\n            \r\n                const gradient = ctx.createLinearGradient(canvasWidth, canvasHeight, canvasWidth, 0);   // градиент \"снизу-вверх\"\r\n    \r\n                // цвета градиента\r\n                gradient.addColorStop(1, 'red');\r\n                gradient.addColorStop(0.7, 'orange');\r\n                gradient.addColorStop(0.45, 'yellow');\r\n                gradient.addColorStop(0, 'green');\r\n\r\n                ctx.fillStyle = gradient;   // устанавливаем заливку градиентом\r\n            }\r\n\r\n            \r\n            ctx.fillRect(i*colWidth + colsSpacing/2, canvasHeight, colWidth - colsSpacing , -relativeColsHeights[i]);   // рисуем колонку\r\n            const fontSize = colWidth / 3 + 'px';   // размер шрифта будет зависеть от кол-ва колонок\r\n            ctx.font = `${fontSize} Arial`;\r\n            ctx.fillStyle = \"#fff\";     // ставим белый цвет заливки, чтобы подписать колонки\r\n            ctx.lineWidth = colWidth / 20; // ширина обводки\r\n            \r\n            // подписываем колонки (по центру колонки снизу)\r\n            ctx.strokeText(colsHeights[i], colWidth * i + (colWidth * .5) - ctx.measureText(colsHeights[i]).width * .5, canvasHeight - 5);   \r\n            ctx.fillText(colsHeights[i], colWidth * i + (colWidth * .5) - ctx.measureText(colsHeights[i]).width * .5, canvasHeight - 5);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        // функция чтобы посчитать количество столбцов\r\n        const size = function(obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) size++;\r\n            }\r\n            return size;\r\n        };\r\n        \r\n        const colsCount = size(this.props.statistics);          // количество столбцов\r\n        const colWidth = this.props.width / colsCount;          // ширина колонки\r\n        const colsHeights = this.props.statistics;              // массив высот всех колонок\r\n        const canvasWidth = this.refs.canvas.width;             // ширина канваса\r\n        const canvasHeight = this.refs.canvas.height;           // высота канваса\r\n        const colsSpacing = this.props.colsSpacing;             // промежутки между колонками\r\n\r\n\r\n        const ctx = this.refs.canvas.getContext('2d');\r\n\r\n\r\n        // ищем максимальное значение (это будет самый высокий столбец)\r\n        const maxColHeight = Math.max( ...colsHeights );\r\n\r\n        // устанавливаем \"единицу высоты\"\r\n        const heightUnit = canvasHeight/maxColHeight;\r\n        \r\n        // создаем массив с относительными высотами столбцов\r\n        const relativeColsHeights = colsHeights.map(colsHeight => colsHeight * heightUnit);\r\n\r\n        this.drawGist(ctx, colsCount, relativeColsHeights, canvasHeight, canvasWidth, colWidth, \r\n            colsSpacing, colsHeights);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // функция чтобы посчитать количество столбцов\r\n        const size = function(obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) size++;\r\n            }\r\n            return size;\r\n        };\r\n        \r\n        const colsCount = size(this.state.statistics);          // количество столбцов\r\n        const colWidth = this.props.width / colsCount;          // ширина колонки\r\n        const colsHeights = this.state.statistics;              // массив высот всех колонок\r\n        const canvasWidth = this.refs.canvas.width;             // ширина канваса\r\n        const canvasHeight = this.refs.canvas.height;           // высота канваса\r\n        const colsSpacing = this.state.colsSpacing;             // промежутки между колонками\r\n\r\n\r\n        const ctx = this.refs.canvas.getContext('2d');\r\n\r\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n\r\n        // ищем максимальное значение (это будет самый высокий столбец)\r\n        const maxColHeight = Math.max( ...colsHeights );\r\n\r\n        // устанавливаем \"единицу высоты\"\r\n        const heightUnit = canvasHeight/maxColHeight;\r\n        \r\n        // создаем массив с относительными высотами столбцов\r\n        const relativeColsHeights = colsHeights.map(colsHeight => colsHeight * heightUnit);\r\n\r\n        this.drawGist(ctx, colsCount, relativeColsHeights, canvasHeight, canvasWidth, colWidth, \r\n            colsSpacing, colsHeights);\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({statistics: event.target.value.split(',')});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='canvas-container'>\r\n                <canvas className=\"chart\" ref=\"canvas\" width={this.props.width} height={this.props.height}/>\r\n                <input type=\"text\" value={this.state.statistics} onChange={this.handleChange} placeholder='Введите числа через запятую'/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Canvas;","import React from 'react';\r\nimport './App.css';\r\nimport Canvas from './components/canvas';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Canvas colorTheme='fullColorsCols' \r\n        colsSpacing={20} \r\n        width={600} \r\n        height={600}\r\n        statistics={[1,2,3,10,5]}\r\n      />\r\n      <Canvas colorTheme='gradient' \r\n        colsSpacing={20} \r\n        width={600} \r\n        height={600}\r\n        statistics={[1,2,3,10,5]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}